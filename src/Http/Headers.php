<?php


namespace Keperis\Http;


use Keperis\Collection;
use Keperis\Interfaces\HeaderInterface;

class Headers extends Collection implements HeaderInterface
{
    protected static $special = [
        'CONTENT_TYPE'    => 1,
        'CONTENT_LENGTH'  => 1,
        'PHP_AUTH_USER'   => 1,
        'PHP_AUTH_PW'     => 1,
        'PHP_AUTH_DIGEST' => 1,
        'AUTH_TYPE'       => 1,
    ];


    public static function creatFromServerData(ServerData $serverData)
    {
        $data = [];
        $serverData = $serverData->toArray();

        foreach ($serverData as $key => $value) {

            $key = strtoupper($key);
            if (isset(static::$special[$key]) || strpos($key, 'HTTP_') === 0) {
                if ($key !== 'HTTP_CONTENT_LENGTH') {
                    $data[$key] = $value;
                }
            }
        }


        return new static($data);
    }

    public function all()
    {
        $all = parent::all();
        $out = [];

        foreach ($all as $key => $props) {
            $out[$props['originalKey']] = $props['value'];
        }

        return $out;
    }

    public function set($key, $value)
    {
        $this->add($key, $value);
    }

    public function add($key, $value)
    {
        $value = !is_array($value) ? [$value] : $value;
        parent::set($this->normalizeKey($key), [
            'value'       => $value,
            'originalKey' => $key,
        ]);
    }

    public function normalizeKey($key)
    {
        $key = strtr(strtolower($key), '_', '-');
        if (strpos($key, 'http-') === 0) {
            $key = substr($key, 5);
        }

        return $key;
    }

    public function get($key, $default = null)
    {
        if ($this->has($key)) {
            return parent::get($this->normalizeKey($key))['value'];
        }

        return $default;
    }

    public function has($key)
    {
        return parent::has($this->normalizeKey($key)); // TODO: Change the autogenerated stub
    }

    public function remove()
    {
        $argc = func_get_args();
        foreach ($argc as $key) {
            parent::remove($this->normalizeKey($key));
        }
    }
}