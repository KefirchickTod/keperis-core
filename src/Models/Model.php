<?php


namespace src\Models;


use App\Models\Dictionary\DictionaryModel;
use App\Provides\Mask;
use Error;
use src\Collection;
use src\Core\Database\DatabaseAdapter;
use src\Core\Database\DatabaseInfoScheme;
use src\Core\DB;
use src\Core\Page\PageCreator;
use src\Interfaces\ModelInterface;
use src\Structure\Structure;
use src\Traits\HasAttributes;
use src\Traits\ModelTableTrait;
use src\Xlsx\Import\Renderer\Render;

class Model extends Collection implements ModelInterface
{

    use HasAttributes, ModelTableTrait;

    /**
     * @var bool
     */
    public static $unguarded = false;
    public $validation = [];
    /**
     * @var array|null
     */
    public $fillable = [];
    /**
     * @var Structure
     */
    public $structure;
    /**
     * @var string
     */
    public $bc_table;
    /**
     * @var null
     */
    public $mask = null;
    /**
     * @var DB
     */
    public $connection;
    /**
     * @var array
     */
    public $guarded = ['*'];


    protected $xlsxImportUnique = [];
    /**
     * @var string|null
     */
    protected $bc_table_id;

    /**
     * @var array
     */
    protected $xlsxMargeColumn = [];

    protected $schem;
    /**
     * Title  for export xmlx
     * @var null|string
     */
    protected $exportTitle = null;
    /**
     * Add check if export allow
     * @var string|bool
     */
    protected $exportRole;


    public function __construct(array $arguments = [], $data = null)
    {

        parent::__construct(is_null($data) ? [] : $data);

        $this->fill($arguments);
        $this->connection = db();
        $this->structure = structure();
        $this->schem = null;
        if ($this->bc_table) {
            $this->schem = new DatabaseInfoScheme($this->bc_table,
                DatabaseAdapter::createDataBaseConnectinByPDOWithoutAttributes($this->connection->getConnection()));
        }
    }

    /**
     * @param $argument
     * @return $this
     */
    public function fill($argument)
    {

        foreach ($this->fillableFromArray($argument) as $key => $value) {
            $key = $this->removeTableFromKey($key);


            // The developers may choose to place some attributes in the "fillable" array/
            // which means only those attributes may be set through mass assignment to
            // the model, and all others will just get ignored for security reasons.
            if ($this->isFillable($key)) {


                $this->setAttribute($key, $value);


            }
        }

        return $this;
    }

    /**
     * @param array $attributes
     * @return array
     */
    public function fillableFromArray(array $attributes)
    {
        if (count($this->getFillable()) > 0 && !static::$unguarded) {
            return array_intersect_key($attributes, array_flip($this->getFillable()));
        }

        return $attributes;
    }

    /**
     * @return array|null
     */
    public function getFillable()
    {
        return $this->fillable;
    }

    /**
     * @param $key
     * @return mixed
     */
    public function removeTableFromKey($key)
    {
        return str_contains($key, '.') ? last(explode('.', $key)) : $key;
    }

    /**
     * @param $key
     * @return bool
     */
    public function isFillable($key)
    {
        if (static::$unguarded) {
            return true;
        }

        // If the key is in the "fillable" array, we can of course assume that it's
        // a fillable attribute. Otherwise, we will check the guarded array when
        // we need to determine if the attribute is black-listed on the model.
        if (in_array($key, $this->getFillable())) {
            return true;
        }

        // If the attribute is explicitly listed in the "guarded" array then we can
        // return false immediately. This means this attribute is definitely not
        // fillable and there is no point in going any further in this method.
        if ($this->isGuarded($key)) {
            return false;
        }

        return empty($this->getFillable()) &&
            !startsWith($key, '_');
    }

    /**
     * @param $key
     * @return bool
     */
    public function isGuarded($key)
    {
        return in_array($key, $this->getGuarded()) || $this->getGuarded() == ['*'];
    }

    /**
     * @return array
     */
    public function getGuarded()
    {
        return $this->guarded;
    }

    public function __get($name)
    {


        if ($this->hasGetMutator($name)) {
            return $this->getAttributeValue($name);
        }
        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    public function convertImportType(string $key, $value)
    {

        if (!$this->schem) {
            throw new \RuntimeException("Cant convert import type without schem table undefined protected bc_table");
        }
        $key = str_replace('-', '_', $key);

        if (!$this->schem->isColumn($key)) {
            return $value;
        }
//        $callbackType = $this->schem->getColumnDataTypeCallback($key);
//        $value = call_user_func($callbackType, $value);
//        if (!$value) {
//            return '';
//        }
        $value = $this->converImpotTypeTel($key, $value);
        return $value;

    }

    protected function converImpotTypeTel(string $key, $value)
    {
        if (preg_match("~mobile~", $key) || preg_match("~phone~", $key)) {

            if ($value[0] !== '+' && strlen($value) > 10) {
                $value = "+" . $value;
            }
        }
        return $value;
    }

    public function mergeXlsxColumn($first, $second)
    {
        $mask = $this->getXlsxMargeColumn();
        $getvalue = function ($value, string $key) use ($mask) {
            if (empty($value)) {
                return $value;
            }

            if (array_key_exists($key, $mask) && (
                    $mask[$key]['type'] === 'multiple' || $mask[$key]['type'] === 'select')
            ) {
                $dictionaryValues = Render::searchValueInDictionary($value, $mask[$key]['values']);
                if ($mask[$key]['type'] === 'multiple' || $key === 'bc-user-companies-business-area' || $key === 'bc-user-companies-business-spher') {
                    return $dictionaryValues;
                }
                $value = $dictionaryValues[0] ?? $value;
            }


            return $value;
        };
        $prepare = function ($array) use ($mask, $getvalue) {
            $array_values = array_values($array);
            $array_keys = array_keys($array);
            $array_values = array_map($getvalue, $array_values, $array_keys);
            $result = array_map(function ($key) use ($mask) {
                if (!array_key_exists($key, $mask)) {
                    return $key;
                }
                return $mask[$key]['name'];
            }, $array_keys);
            $result = array_combine($result, $array_values);
            return $result;
        };


        [$first, $second] = [call_user_func($prepare, $first), call_user_func($prepare, $second)];

        return array_merge($second, $first);
    }

    /**
     * @return array
     * Get setting for create input feilds
     */
    public function getXlsxMargeColumn()
    {
        return $this->xlsxMargeColumn;
    }

    public function delete($fields)
    {
        if (!is_array($fields)) {
            $fields = [$this->id() => $fields];
        }
        return $this->connection->deleteSql($this->bc_table, $fields);
    }

    public function id()
    {
        if (!$this->bc_table_id) {
            $this->bc_table_id = $this->bc_table . "_id";
        }
        return $this->bc_table_id;

    }

    public function getImportUnique($key = null)
    {

        if ($key) {
            return $this->xlsxImportUnique[$key] ?? null;
        }
        return array_keys($this->xlsxImportUnique);
    }

    /**
     * @return bool
     */
    public function totallyGuarded()
    {
        return count($this->getFillable()) === 0 && $this->getGuarded() == ['*'];
    }

    public function save($valid = true, $self = false)
    {

        $toSave = $valid ? $this->connection->valid($this->bc_table, $this->attributes) : $this->attributes;

        $save = $this->connection->insertOrUpdateSql($this->bc_table, $toSave);
        if ($self === true) {
            return new static();
        }
        return intval($save);
    }

    public function update($id)
    {

        $attributes = $this->getAttributes();

        if (!$attributes) {
            throw new \RuntimeException("Empty data for update");
        }

        $attributes = $this->connection->databaseValidation($this->bc_table, $attributes);


        if (!$attributes) {
            throw new \RuntimeException("Empty data after validation");
        }

        $update = $this->connection->updateSql($this->bc_table, $attributes, "{$this->bc_table}_id = $id");


        return $update;
    }

    public function forwardCallTo($object, $method, $parameters)
    {
        try {
            return $object->{$method}(...$parameters);
        } catch (Error $e) {
            $pattern = '~^Call to undefined method (?P<class>[^:]+)::(?P<method>[^\(]+)\(\)$~';

            if (!preg_match($pattern, $e->getMessage(), $matches)) {
                throw $e;
            }

            if ($matches['class'] != get_class($object) ||
                $matches['method'] != $method) {
                throw $e;
            }

        }
        return false;
    }

    public function __call($method, $parameters)
    {

        if (!method_exists($this, $method)) {
            throw new \RuntimeException('Undefined method ' . $method);
        }

        return $this->$method($parameters);

    }


    public function getStructure(): Structure
    {
        return $this->structure;
    }

    /**
     * @param Structure $structure
     * @return static
     */
    public function withStructure(Structure $structure)
    {
        $clone = clone $this;
        $clone->structure = $structure;
        return $clone;
    }

    /**
     * @param Mask $mask
     * @return static
     */
    public function withMask(Mask $mask)
    {
        $clone = clone $this;
        $clone->mask = $mask;
        return $clone;
    }

    public function getMask(): Mask
    {
        try {
            if (is_object($this->mask) && $this->mask instanceof Mask) {
                return $this->mask;
            } elseif (!$this->mask) {
                throw new \RuntimeException("Get mask must return instance of class Mask no null");
            }
        } catch (\RuntimeException $exception) {
            error_log($exception->getMessage());
        }
        $this->mask = new $this->mask;
        // debug($this->mask);
        return $this->getMask();
    }

    /**
     * @param $id
     * @param null $dataArray
     * @param null $key
     * @return $this
     */
    public function find($id, $dataArray = null, $key = null)
    {
        if ($dataArray) {
            set_structure_setting($dataArray, 'id = ' . $id, 'where', $key);
            $row = $this->structure->set($dataArray)->get($key ?: key($dataArray));
        } else {

            $row = $this->connection->selectSql($this->bc_table, '*', "{$this->bc_table}_id = $id");
        }
        return $this->withData(valid($row, 0, []));
    }

    public function withData($data)
    {
        return new static($this->fillable, $data);
    }

    public function withValue($item)
    {
        $this->clear();
        foreach ($item as $key => $value) {
            $this->set($key, $value);
        }
        return $this;
    }

    public function findIdByXlsxValue($column, $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }

        $value = join(', ', $value);

        $column = $this->xlsxImportUnique[$column];

        if (!$this->bc_table_id) {
            $this->bc_table_id = $this->bc_table . "_id";
        }

        $row = $this->connection->selectSql($this->bc_table, $this->bc_table_id . " AS id", "$column IN ($value)");
        return $row;
    }

    public function where(string $query, $need = '*')
    {
        if (is_array($need)) {
            $need = implode(', ', $need);
        }
        $fetch = $this->connection->selectSql($this->bc_table, $need, $query);
        if (!empty($fetch)) {
            return $this->withData($fetch);
        }
        return $this->withData([]);
    }

    public function whereAs(string $query, $need = '*')
    {
        return $this->convertToOrm($this->connection->selectSql($this->bc_table, $need, $query));
    }

    /**
     * @param $data
     * @return $this|Collection
     */
    public function convertToOrm($data)
    {
        if (!$data) {
            return new static($this->attributes);
        }

        $collection = new Collection(array_map(function ($row) {
            return $this->withData($row);
        }, $data));


        return $collection;

    }

    public function setDefault(string $column, $value)
    {
        return $this->connection->getConnection()->query("ALERT TABLE " . $this->bc_table . " ALERT $column SET DEFAULT " . $value);
    }

    public function validation($arguments, array $validation = null)
    {
        $this->validation = $validation ?: $this->validation;
        $keys = array_unique(array_merge(array_keys($this->validation), array_keys($arguments)));

        foreach ($keys as $key) {
            if (array_key_exists($key, $this->validation) && $this->validation[$key] instanceof \Closure) {
                $arguments[$key] = call_user_func($this->validation[$key], $arguments[$key] ?? '');
            }
        }
        return $arguments;
    }

    public function addStructureHandle(callable $callback)
    {
        $this->structure->add($callback);
        return $this;
    }


    public function table(string $key, string $titleKey = null, string $actionKey = null)
    {
        [$dataStructure, $title, $action] = [
            $this->mask()->getMask($key),
            $this->mask()->getTitle($titleKey ?: $key),
            $this->mask()->getAction($actionKey ?: $key),
        ];

        $this->seedCommand();

        $this->initPageSetting($key, $dataStructure, $title);
        $this->setSettingPaginator();
        $this->setActionAndTitle($action, $title);
        $this->setButtonSetting($key);


        $page = new PageCreator($this->structure, $dataStructure);


        if (container()->request->isXhr()) {
            return $this->createTableAsArray($page);
        }

        return $this->createTable($page);


    }

    /**
     * @return Mask
     */
    public function mask()
    {
        if (!$this->mask) {
            throw new \RuntimeException("Undefined variable mask");
        }

        if (!is_object($this->mask)) {
            $this->mask = new $this->mask;
        }

        if (!$this->mask instanceof Mask) {
            throw new \TypeError("Error type for mask");
        }

        return $this->mask;
    }


    public function setArrayAtributes(array $attribute)
    {
        foreach ($attribute as $key => $value) {
            $this->setAttribute($key, $value);
        }
        return $this;
    }
}
